{
  "A01:2021 - Broken Access Control": {
    "description": "Access control vulnerabilities arise when role or permission-based controls are missing, poorly implemented, or can be bypassed through input manipulation or forced browsing of URLs/APIs. This can allow privilege escalation or direct access to restricted resources.\n\n**Example:** An authenticated user modifies their own ID in a GET parameter and accesses another user's data.",
    "link": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
    "level": "alto"
  },
  "A02:2021 - Cryptographic Failures": {
    "description": "These vulnerabilities stem from weak algorithms, improper key management, misuse of certificates, or lack of protection for data in transit or at rest. An attacker may intercept, alter, or decrypt sensitive data.\n\n**Example:** User passwords stored in cleartext or hashed with MD5 without a salt.",
    "link": "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
    "level": "alto"
  },
  "A03:2021 - Injection": {
    "description": "Injection flaws allow an attacker to send unauthorized commands to an interpreter via crafted inputs, leading to command execution, database dumps, or system compromise.\n\n**Example:** A login form vulnerable to SQLi: input `' OR '1'='1` grants unauthorized access.",
    "link": "https://owasp.org/Top10/A03_2021-Injection/",
    "level": "critico"
  },
  "A04:2021 - Insecure Design": {
    "description": "An insecure design reflects a lack of threat modeling or absence of security measures in logical flows. It often leads to breaches that would have been avoidable with proper upfront architecture.\n\n**Example:** An app does not enforce authorization checks in checkout flows or profile edits.",
    "link": "https://owasp.org/Top10/A04_2021-Insecure_Design/",
    "level": "medio"
  },
  "A05:2021 - Security Misconfiguration": {
    "description": "Misconfigurations or defaults in services, software, or environments expose data, interfaces, or unintended functionality. This includes enabled debugging, open ports, verbose errors, and unnecessary services.\n\n**Example:** Apache server exposes mod_status and configuration files accessible over the web.",
    "link": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
    "level": "alto"
  },
  "A06:2021 - Vulnerable and Outdated Components": {
    "description": "Using libraries, frameworks, or components with known CVEs and missing updates allows attackers to exploit public vulnerabilities. These issues are often known but overlooked in patch processes.\n\n**Example:** WordPress with a known vulnerable plugin that allows arbitrary file upload.",
    "link": "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
    "level": "medio"
  },
  "A07:2021 - Identification and Authentication Failures": {
    "description": "Authentication issues include poor credential management, absence of MFA, sessions not invalidated or predictable. They enable impersonation, brute forcing, and hijacking.\n\n**Example:** A static session ID or one not regenerated after login enables session fixation.",
    "link": "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
    "level": "alto"
  },
  "A08:2021 - Software and Data Integrity Failures": {
    "description": "Includes use of unverified packages, compromised CI/CD pipelines, or unsigned updates that can introduce malicious code into builds or deployments.\n\n**Example:** CI/CD fetches scripts from a GitHub repo without checksum or signature verification.",
    "link": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
    "level": "medio"
  },
  "A09:2021 - Security Logging and Monitoring Failures": {
    "description": "The lack of logs, alerts, or tracing undermines timely attack detection and the effectiveness of the response. Attackers can operate undetected for long periods.\n\n**Example:** A brute-force attack goes unnoticed because failed attempts are not logged.",
    "link": "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
    "level": "basso"
  },
  "A10:2021 - Server-Side Request Forgery (SSRF)": {
    "description": "In an SSRF attack, the attacker tricks the server into making HTTP requests to internal or external resources, often bypassing firewalls. This can lead to information disclosure or lateral movement.\n\n**Example:** Input in a URL field allows access to `http://localhost:8080/admin` from the target server.",
    "link": "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_(SSRF)/",
    "level": "medio"
  }
}